#!/bin/bash

# The various escape codes that we can use to color our prompt.
COLOR_NONE="\[\e[0m\]"

FG_BLACK="\[\e[38;5;232m\]"
FG_GREEN="\[\033[0;32m\]"
FG_LIGHT_BLUE="\[\e[38;5;081m\]"
FG_LIGHT_GRAY="\[\e[0;37m\]"
FG_RED="\[\033[0;31m\]"
FG_WHITE="\[\e[38;5;231m\]"
FG_YELLOW="\[\033[1;33m\]"

BG_BLUE="\[\e[48;5;025m\]"
BG_GREEN="\[\e[48;5;022m\]"
BG_ORANGE="\[\e[48;5;130m\]"
BG_RED="\[\e[48;5;088m\]"
BG_YELLOW="\[\e[48;5;230m\]"

# Determine the branch/state information for this git repository.
function _set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "Changes not staged for commit" ]]; then
    state="$FG_RED"
  elif [[ ${git_status} =~ "Changes to be committed" ]] || [[ ${git_status} =~ "Untracked files" ]]; then
    state="$FG_YELLOW"
  else
    state="$FG_GREEN"
  fi

  # Set arrow icon based on status against remote.
  remote_pattern="# Your branch is (ahead|behind)+ "
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  else
    remote=""
  fi
  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  # Get the name of the branch.
  branch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"

  # Set the final branch string.
  printf "${state}(${branch}${remote})${COLOR_NONE}"
}

# Determine active Python virtualenv details.
function _set_virtualenv {
  [ -n "$VIRTUAL_ENV" ] && printf "${FG_LIGHT_BLUE}[$(basename ${VIRTUAL_ENV})]${COLOR_NONE}"
}

function _set_k8s {
  # if KUBECONFIG is unset, set it to default ~/.kube/config
  [ -z "$KUBECONFIG" ] && local KUBECONFIG=~/.kube/config
  # only configure if KUBECONFIG exists
  if [ -f $KUBECONFIG ]; then
    local context=$(grep current-context $KUBECONFIG | awk '{print $2}')
    local namespace=$(kubectl config view -o jsonpath="{.contexts[?(@.name == '$context')].context.namespace}")
    printf "${FG_WHITE}${BG_BLUE} $context:$namespace ${COLOR_NONE}"
  fi
}

function _set_aws {
  [ -n "$AWS_PROFILE" ] && printf "${FG_WHITE}${BG_ORANGE} ${AWS_PROFILE} ${COLOR_NONE}"
}

# Set the full bash prompt.
function _set_bash_prompt {
  BASE_PS="${LIGHT_GRAY}\w${COLOR_NONE} \$"
  PS1=''
  PS1="${PS1}$(_set_aws)"
  PS1="${PS1}$(_set_k8s && printf ' ')"
  PS1="${PS1}$(_set_virtualenv && printf ' ')"
  which git &>/dev/null && git rev-parse --git-dir &>/dev/null && PS1="${PS1}$(_set_git_branch && printf ' ')"
  PS1="${PS1}${BASE_PS} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=_set_bash_prompt
